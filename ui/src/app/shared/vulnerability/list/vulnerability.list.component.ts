import {Component, Input} from '@angular/core';
import {TranslateService} from '@ngx-translate/core';
import {cloneDeep} from 'lodash';
import {finalize} from 'rxjs/operators';
import {Application, Vulnerability} from '../../../model/application.model';
import {Project} from '../../../model/project.model';
import {ApplicationStore} from '../../../service/application/application.store';
import {ToastService} from '../../toast/ToastService';

@Component({
    selector: 'app-vulnerabilities-list',
    templateUrl: './vulnerabilities.list.html',
    styleUrls: ['./vulnerabilities.list.scss']
})
export class VulnerabilitiesListComponent {

    _filter: string;
    @Input('filter')
    set filter(data: string) {
        this._filter = data;
        this.updateVulns();
    }
    get filter() {
        return this._filter;
    }
    @Input('vulnerabilities')
    set vulnerabilities(data: Array<Vulnerability>) {
        if (data) {
            this.allVulnerabilities = data;
            this.updateVulns();
        }
    };
    @Input() edit = false;
    @Input() project: Project;
    @Input() application: Application;

    allVulnerabilities: Array<Vulnerability>;
    filteredVulnerabilities: Array<Vulnerability>;

    constructor(private _applicationStore: ApplicationStore, private _translate: TranslateService,
                private _toast: ToastService) {

    }

    updateVulns(): void {
        if (this.allVulnerabilities) {
            if (!this.filter) {
                this.filteredVulnerabilities = this.allVulnerabilities;
            } else {
                this.filteredVulnerabilities = this.allVulnerabilities
                    .filter(v => (v.component + ' ' + v.version).indexOf(this.filter) >= 0)
            }
        }
    }

    ignoreVulnerability(v: Vulnerability): void {
        v.loading = true;
        let vuln = cloneDeep(v);
        vuln.ignored = !vuln.ignored;
        this._applicationStore.ignoreVulnerability(this.project.key, this.application.name, vuln)
            .pipe(finalize(() => v.loading = false))
            .subscribe((vUpdated) => {
            this._toast.success('', this._translate.instant('vulnerability_updated'));
        });
    }
}
